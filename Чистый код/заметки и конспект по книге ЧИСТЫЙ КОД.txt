Чистый код
Важность в мелочах, код должен быть тчательно проработан (то есть слёту не получится предложить, как его улучшить), приятно читаем и понятен другому человеку.
Пресекать бардак нужно сразу. Хорошая метафора, как на рабочем месте у станка.
Устранение дублирования, выполнение одной операции, выразительность, простые абстракции. крч ООП и SOLID
ИМЕНА
их надо давать так, чтобы было понятно что, есть что, избежать неочевидность, не подразумевалось, что читатель знает ответы на очевидные (как может показаться) вопросы
даже однострочные конструкции с константами (волшебными числами) нужно выносить в отдельный метод
if (cell[STATUS_VALUE] == FLAGGED)
	flaggedCells.add(cell);
=>
if (cell.isFlagged())
	flaggedCells.add(cell);

дезынформация - избегать, List - структура данных, или всё-таки какой-то список имён? (которые могут храниться в массиве). 
Длинные и понятные имена, но в них малозаметных различия? - чёрт ногу сломит, человек ленивый и не внимательный.

Неинформативные слова избыточны.
Похожие символы - плохо О-0 l-1.
a1, a2, и что это значит? неочевидно.
klass (ведь class ключевое слово языка)
theZork... the не несёт никакой смысловой нагрузки, а переменная zork уже есть, так не надо (p.s. артиклы a  и the применялись, как например перед приватной переменной ставить символ "_", но о префиксах ниже)

Чем имя NameString лучше Name? Разве имя может быть, скажем,
вещественным числом? Если может, то это нарушает предыдущее правило о дезинформации!!!!!!!!
При отсутствии жестких именных схем имя moneyAmount не отличается от money,
customerInfo не отличается от customer, accountData не отличается от account,
а theMessage — от message. Записывайте различающиеся имена так, чтобы чита-
тель кода понимал, какой смысл заложен в этих различиях.
не присваивать переменным в нащвании их тип, зачем давать имя таблица типу данных таблица?

миена удобно читать, как книгу, чтобы их имена применять в речи
имена должно быть удобно искать

префиксы не нужны, IDE крутые, языки современные, всё и так понятно + не нужно изменять имя переменной при изменении её типа
Кроме того, люди быстро учатся игнорировать префиксы (и суффиксы), чтобы видеть содержательную часть имени. Чем больше мы читаем код, тем реже заме чаем префиксы. В конечном итоге префикс превращается в невидимый балласт, характерный для старого кода.


имена можно понять из контекста
1. предметной области
2. код - для программистов (паттерны, например)
хорошие префиксы - addrFirstName? addrLastName... но лучше обернуть имена (которые составляют адрес) в класс Address

перегружать тоже не очень хорошо, короткие имена лучше длинных, но если мы не теряем смысл. отсюда необходимость оборачивания в контекст
ещё IDE может высрать огромный список имён, если ты перед каждым вставляешь одно и тоже
MAC URL - понятно, что это адреса. для других случаев создаётся класс Адрес, а потом объект адрес покупателя/аккаунта т.п.

